<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#=        ViewDataTypeName #>
<#

    var fk = "fk";
    var keycolumn = "";

    // The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
    if(IsPartialView) {
#>

<#
    } else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#=            ViewName#>";
<#
        if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#=                LayoutPageFile#>";
<#
        }
#>
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2><#=            ViewName#></h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong><#=            ViewName#></strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
			@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary"})
        </div>
    </div>
</div>

<#
    } else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#=            ViewName #></title>
</head>
<body>
<#
        PushIndent("    ");
    }
#>
<#
    if (ReferenceScriptLibraries) {
#>
<#
        if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
        }
#>
<#
        else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#=                JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
        }
#>

<#
    }
#>


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5><#=        ViewName#> <#=        ViewDataTypeShortName #></h5>
                </div>
                <div class="ibox-content">

				@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">

        @Html.ValidationSummary(true)
<#
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.Scaffold && !property.IsAssociation) {
            if (property.IsPrimaryKey) {
                fk = property.PropertyName;  
#>
        @Html.HiddenFor(model => model.<#=                    property.PropertyName #>)

<#
            } else if (!property.IsReadOnly) {
#>
        <div class="form-group">
<#
                if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#=                        property.PropertyName #>, "<#=                        GetAssociationName(property) #>", new { @class = "control-label col-md-2" })
<#
                } else if (!property.PropertyName.Contains("DetailForm_")) {
#>
            @Html.LabelFor(model => model.<#=                        property.PropertyName #>, new { @class = "control-label col-md-2" })
<#
                }
#>
            <div class="col-md-10">
<#
                if (property.IsForeignKey) {
#>
                @Html.DropDownList("<#=                        property.PropertyName #>", (IEnumerable<SelectListItem>)ViewBag.<#=                        property.PropertyName #>List, new { @class = "form-control" })

<#
                } else if (property.TypeName == "System.DateTime" && !property.PropertyName.Contains("DetailForm_")) {
#>
                <div class="input-group date" id="<#= property.PropertyName #>">
                     <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                    @Html.EditorFor(model => model.<#=                        property.PropertyName #>, new { @class= "form-control" })
                </div>
<#

                } else if (!property.PropertyName.Contains("DetailForm_")) {
#>
                @Html.EditorFor(model => model.<#=                        property.PropertyName #>)
<#
                }
#>
                @Html.ValidationMessageFor(model => model.<#=                    property.PropertyName #>)
            </div>
        </div>

<#
            }
        }
    }
#>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
				@Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white"})
            </div>
        </div>
    </div>
}


                </div>
            </div>
        </div>
    </div>
 </div>

<#

//untuk one-many
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.PropertyName.Contains("line")) {

 #>

<div class="wrapper wrapper-content  animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox ">
                <div class="ibox-title">
                    <h5>Detail List</h5>
                </div>
                <div class="ibox-content">


                    <div class="jqGrid_wrapper">
                        <table id="jqGrid"></table>
                        <div id="jqGridPager"></div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<#
        
            break;
        }
    }
 #>



@section Scripts{
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/jqGrid")

    <script type="text/javascript">
        $(document).ready(function () {

<#
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.TypeName == "System.DateTime" && !property.PropertyName.Contains("DetailForm_")) {
#>
 $('#<#=                property.PropertyName #>').datepicker({
                todayBtn: "linked",
                keyboardNavigation: false,
                forceParse: false,
                calendarWeeks: true,
                autoclose: true
            });

<#
        } 
    }
#>

   

            var getQueryStringValue = function (field, url) {
                var href = url ? url : window.location.href;
                var reg = new RegExp('[?&]' + field + '=([^&#]*)', 'i');
                var string = reg.exec(href);
                return string ? string[1] : null;
            };

            var currentpath = window.location.pathname;
            var removepath1 = currentpath.substr(currentpath.lastIndexOf('/') + 0) + '$';
            currentpath = currentpath.replace(new RegExp(removepath1), '');

            var removepath2 = currentpath.substr(currentpath.lastIndexOf('/') + 1) + '$';
            currentpath = currentpath.replace(new RegExp(removepath2), '');

            var fkidx = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);
            var url = currentpath + "lines/" + fkidx;
            var urlAdd = currentpath + "LineCreate";
            var urlEdit = currentpath + "LineEdit";
            var urlDelete = currentpath + "LineDelete";

<#
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.PropertyName.Contains("DetailForm_ddl_")) {
 #>
         var uri_<#=property.PropertyName.Remove(0, 15) #> = currentpath + "getddl<#=property.PropertyName.Remove(0, 15) #>";
            
         var ddl_<#=property.PropertyName.Remove(0, 15) #> = $.ajax({ url: uri_<#=property.PropertyName.Remove(0, 15) #>, dataType: 'string', async: false, success: function (data, result) { if (!result) alert('load ddl error.'); } }).responseText;

<#
        }
    }
 #>



            $("#jqGrid").jqGrid({
                url: url,
                datatype: "json",
                mtype: "Get",
                height: 250,
                autowidth: true,
                shrinkToFit: true,
                rowNum: 20,
                rowList: [10, 20, 30],
                colNames: [
<#
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.PropertyName.Contains("DetailForm_")) {
            if (property.PropertyName.Contains("_pkidx_")) {
 #>
                '<#=                    property.PropertyName.Remove(0, 17) #>'

<#
            } else if (property.PropertyName.Contains("_ddl_")) {
 #>
            , 'ddl_<#=property.PropertyName.Remove(0, 15) #>'
<#
                } else if (property.TypeName == "System.DateTime") {
 #>

            , '<#=property.PropertyName.Remove(0, 11) #>'

<#
            } else {
 #>
                , '<#=                    property.PropertyName.Remove(0, 11) #>'
<#
            }
        }
    }
 #>
],
                colModel: [
<#
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.PropertyName.Contains("DetailForm_")) {
            if (property.PropertyName.Contains("_pkidx_")) {
                keycolumn = property.PropertyName.Remove(0, 17);
 #>
                { key: true, hidden: true, editable: true, editrules: { edithidden: false }, name: '<#=property.PropertyName.Remove(0, 17) #>', index: '<#=                    property.PropertyName.Remove(0, 17) #>' }

<#
            } else if (property.PropertyName.Contains("_ddl_")) {
 #>
            , {
                    key: false, editable: true, name: '<#=property.PropertyName.Remove(0, 15) #>', index: '<#=property.PropertyName.Remove(0, 15) #>', edittype: 'select', editoptions: {
                        value: ddl_<#=property.PropertyName.Remove(0, 15) #>
                    }}
<#
            } else if (property.TypeName == "System.DateTime") {
 #>
                 , {
                    key: false, editable: true, name: '<#=property.PropertyName.Remove(0, 11) #>', index: '<#=property.PropertyName.Remove(0, 11) #>', formatter: 'date', editoptions: {
                        size: 20,
                        maxlength: 10,
                        dataInit: function (element) {
                            $(element).datepicker(
                                    {
                                        dateFormat: 'yy-mm-dd',
                                        constrainInput: false,
                                        showOn: 'button',
                                        buttonText: '...',
                                        autoClose: true
                                    }
                                );
                        }
                    }
                }

<#
            } else {
 #>
                , { key: false, editable: true, name: '<#=property.PropertyName.Remove(0, 11) #>', index: '<#=property.PropertyName.Remove(0, 11) #>'}
<#
            }
        }
    }
 #>
                ],
                pager: "#jqGridPager",
                viewrecords: true,
                loadonce: false,
                caption: "",
                add: true,
                edit: true,
                addtext: 'Add',
                edittext: 'Edit',
                hidegrid: false,
                onSelectRow: function (ids) {
                    if (ids) {
                        var ret = jQuery("#jqGrid").jqGrid('getRowData', ids);
                        key = ret.<#=keycolumn #>;
                    }
                }
            });

            // We need to have a navigation bar in order to add custom buttons to it
            $('#jqGrid').navGrid('#jqGridPager',
            { edit: true, add: true, del: true, search: true, refresh: true, view: false, position: "left", cloneToTop: true },
            {
                //edit
                zIndex: 100,
                url: urlEdit,
                closeOnEscape: true,
                closeAfterEdit: true,
                recreateForm: true,
                afterComplete: function () {
                    if (response.responseText) {
                        alert(response.responseText);
                    }
                },
                editData: {
                    fkidx: fkidx
                }
            }, {
                zIndex: 100,
                url: urlAdd,
                closeOnEscape: true,
                closeAfterAdd: true,
                afterComplete: function () {
                    if (response.responseText) {
                        alert(response.responseText);
                    }
                },
                editData: {
                    fkidx: fkidx
                }
            }, {
                zIndex: 100,
                url: urlDelete,
                closeOnEscape: true,
                closeAfterDelete: true,
                afterComplete: function () {
                    if (response.responseText) {
                        alert(response.responseText);
                    }
                },
                delData: {
                    key: function () {
                        return key;
                    }
                }
            });

         



            // Add responsive to jqGrid
            $(window).bind('resize', function () {
                var width = $('.jqGrid_wrapper').width();
                $('#table_list_1').setGridWidth(width);
            });


        


        });
    </script>

    }


<#
    if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
    }
#>
<#
    else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#=            JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
    }
#>
<#
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
    if(!IsPartialView && !IsLayoutPageSelected) {
        ClearIndent();
#>
</body>
</html>
<#
    }
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>